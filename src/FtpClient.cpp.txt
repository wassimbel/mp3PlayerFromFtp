#include "FTPClient.h"
#include <sstream>
#include <fstream>
#include <iostream>

/**
 * Constructor to initialize FTP client with server details.
 */
FTPClient::FTPClient(const std::string& server, const std::string& user, const std::string& password)
    : server(server), user(user), password(password) {
    curl_global_init(CURL_GLOBAL_DEFAULT); // Initialize cURL
    curl = curl_easy_init(); // Create a cURL handle
}

/**
 * Static callback function to handle data received from the FTP server.
 * @param contents - Pointer to the data received.
 * @param size - Size of a single data element.
 * @param nmemb - Number of data elements.
 * @param userp - Pointer to the user-defined data structure.
 * @return Size of the data handled.
 */
size_t FTPClient::WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

/**
 * Method to list files in a specified directory on the FTP server.
 * @param path - The path of the directory to list files from.
 * @return A vector of strings containing the names of the files.
 */
std::vector<std::string> FTPClient::listFiles(const std::string& path) {
    std::vector<std::string> files;
    if (curl) {
        std::string listUrl = server + path; // Construct URL for the directory
        curl_easy_setopt(curl, CURLOPT_URL, listUrl.c_str());
        curl_easy_setopt(curl, CURLOPT_USERNAME, user.c_str());
        curl_easy_setopt(curl, CURLOPT_PASSWORD, password.c_str());

        std::string fileList;
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &fileList);

        CURLcode res = curl_easy_perform(curl); // Perform the request
        if (res == CURLE_OK) {
            std::istringstream iss(fileList);
            std::string line;
            while (std::getline(iss, line)) {
                files.push_back(line); // Add each file to the list
            }
        } else {
            throw std::runtime_error("Failed to list files: " + std::string(curl_easy_strerror(res)));
        }
    }
    return files;
}

/**
 * Method to download a file from the FTP server to the local path.
 * @param remotePath - The path of the file on the FTP server.
 * @param localPath - The local path where the file will be saved.
 */
void FTPClient::downloadFile(const std::string& remotePath, const std::string& localPath) {
    if (curl) {
        std::string downloadUrl = server + remotePath; // Construct URL for the file
        curl_easy_setopt(curl, CURLOPT_URL, downloadUrl.c_str());
        curl_easy_setopt(curl, CURLOPT_USERNAME, user.c_str());
        curl_easy_setopt(curl, CURLOPT_PASSWORD, password.c_str());

        std::ofstream file(localPath, std::ios::binary); // Open local file for writing
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, nullptr);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);

        CURLcode res = curl_easy_perform(curl); // Perform the request
        if (res != CURLE_OK) {
            throw std::runtime_error("Failed to download file: " + std::string(c